%%  Comparison of vibration propagation in the hand using accelerometer array %%

%%% DESCRIPTION %%%
% This script aims to process the data acquired from the accelerometer
% array.
%
% PART 1 : Load data from recorded file. Extract the 42(over 46) - accele
% rometer information and structure them to be organnized and process.
%
% PART 2 : Operate signal treatments to reduce noise. 1) Moving average
% filter. 2) Bandpass 200-500 Hz.
%
% PART 3 : Create dataset made of the extracted signals
%
% PART 4 : use k-nn clissification
%
% PART 5 : Visualize results from knn classification with confusion matrix

% Function files needed : 
% new_extract_data.m , visualize_data.m , moving_average_filter.m , 
% pass_band_filter.m , create_dataset.m , classify_knn.m, find_knn.m .
%
% Author: Ines Lacote
% GIT : https://github.com/InesLac/AccSignalComparison
% email: ines.lacote@protonmail.com
% July 2020; Last revision: 19-Nov-2004
%%                             CLEAN WORKSPACE                            %%

clear;
close all;

%% PART 1 : DATA ACQUISITION %%

%Read file values
%data_path = 'C:\Users\ilaco\AccArrayStudy\Data'; %path to csv file
file = dlmread([data_path,'data_1.csv'], ';'); %csv file generated by prg.cpp

% Accelerometer Array specifications 
nb_acc = 42;
nb_axis = 3;
gscale = 0.00073;

%Index corresponding to x, y, z axis values in csv file
ind_x = 1 : nb_axis : size(file,2); 
ind_y = 2 : nb_axis : size(file,2);
ind_z = 3 : nb_axis : size(file,2);
ind_acc = [1:9,11:19,21:29,31:39,41:46]; % Skip 10,20,30,40

%Generate matrix data (time x nb_acc x nb_axis) multiplied by scaling factor
data_acc = new_extract_data(file, nb_acc, ind_acc, nb_axis, gscale, ind_x, ind_y, ind_z);

%Generate time vector
t_0 = 0;
t_end = 5;
c = linspace(t_0,t_end,size(file,1));

%Visualize 42 acc signals on 3 figures (for each axis)
label_axis = {'X', 'Y', 'Z'}; % Each accel record data in 3D
visualize_data(data_acc, nb_acc, ind_acc, label_axis, c)

% % UNCOMMENT this part IF HAVING SEVERAL PATTERNS IN ONE RECORDING that
% % you need to seperate.
%
% cut1_beg = 20; %index to start cutting 1st sample
% cut_1_final = 300; %index to end cutting the 1st sample
% cut2_beg = 400;
% cut_2_final = 700;
% cut3_beg = 800;
% cut_3_final = 1100;
% extractIndex = [cut1_beg cut_1_final ]cut2_beg cut_2_final cut3_beg cut_3_final];
% count = 1;
% % Seperate data and create correponding files "data_file_name_1(then 2,3,...)"
% for samp = 1:2:length(extractIndex/2)
%     file = data_acc(extractIndex(samp):extractIndex(samp+1),:,:);
%     fileName = ['data_acc_Aletter_',int2str(count)]; %change file name here. ...
%     %int2str(count)write the number of sample to create different file names and to conserve trace.
%     count = count + 1;
%     save(fileName, 'file');
% end


%% PART 2 : SIGNAL PROCESSING/CLEANING %%

%Moving average filter 
nb_points = 21 ; % Number of the moving average filter window
data_acc_MA = moving_average_filter(file,nb_acc,nb_axis, nb_points);

%Pass-band filter
fs = 1600 ;
f_pass = [20, 500]; % Bandpass lower and upper limits
data_acc_BP = pass_band_filter(data_acc_MA,nb_acc,nb_axis, fs, f_pass);

% New visualization
t_01 = 0;
t_end1 = 2;
c1 = linspace(t_0,t_end,size(file,1));

visualize_data(data_acc_MA,nb_acc, ind_acc, label_axis, c1)
visualize_data(data_acc_BP,nb_acc, ind_acc, label_axis, c1)


%% PART 3 : ORGANIZING CLEARED SIGNAL IN DATASET

% dataset = []; %!!! ONLY if dataset does not exist yet !!!
% label = []; %!!! ONLY if label does not exist yet !!!
% save('datasetTest.mat', 'dataset'); %!!! ONLY if dataset does not exist yet !!!
% save('labelTest.mat', 'label'); %!!! ONLY if label does not exist yet !!!

load('datasetTest.mat');
load('labelTest.mat')
%load('data_acc_Aletter_01.mat'); %example to be put in the dataset
letter = 'rest'; % label for this sample

% add new example to the existing database
[dataset, label] = create_dataset(dataset,label,file,letter,nb_acc);

% save('dataSet.mat', 'dataSet');
% save('label.mat', 'label');

%% 4th PART : CLASSIFICATION %%

% k value to find k nearest neighbourg
k=3;
nb_test = size(dataset,1);
res_label= cell(nb_test,2);
res_k_neighbour = cell(nb_test,1);
dist_matrix= -ones(nb_test);
% new_example is the file to be compared
new_example = file ;

%res_label is composed of 2 colomns :
%(1st : given label by the comparison operated in classify; 2nd : true label)
%res_k_neighbour gives the k neighbour found by the comparison algo
%dist_matrix gives the distances between the examble and the elements of
%the database (using dtw distance)
[res_label,res_k_neighbour,dist_matrix] = classify_knn(dataset,label,new_example,k,res_label,res_k_neighbour,dist_matrix, nb_test);

save('resLabelK3.mat','resLabel')
save('resKNeighbourK3.mat','resKNeighbour')
save('distMatrixK3.mat','distMatrix')



%% 5th PART : VISUALISATION OF RESULTS %%

% different labels tested
class = ["A", "C", "D", "E", "F", "H", "I", "O", "U", "rest"];

% results given by confusion matrix
visualize_knn_results(res_label,dist_matrix, class);
